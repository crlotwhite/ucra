name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    name: ${{ matrix.os }} / ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release, Debug]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up MSVC devcmd (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake

      - name: Configure
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DUCRA_BUILD_EXAMPLES=OFF -DUCRA_BUILD_TOOLS=OFF -DUCRA_BUILD_CPP_BINDINGS=OFF -DUCRA_BUILD_PYTHON_BINDINGS=OFF -DUCRA_BUILD_DOTNET_BINDINGS=OFF -DUCRA_BUILD_RUST_BINDINGS=OFF

      - name: Build
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Test
        run: |
          ctest --test-dir build --output-on-failure --build-config ${{ matrix.build_type }} -E "(cpp|dotnet|python|rust)_"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ucra-build-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            # Unix static libs & binary
            build/libucra_impl.a
            build/libcjson.a
            build/resampler
            # Windows (multi-config) static libs & binary
            build/${{ matrix.build_type }}/ucra_impl.lib
            build/${{ matrix.build_type }}/cjson.lib
            build/${{ matrix.build_type }}/resampler.exe
            # Fallback if generator puts libs at top-level without prefix
            build/ucra_impl.lib
            build/cjson.lib
            build/resampler.exe
          retention-days: 7
          if-no-files-found: warn

  build-and-test-examples:
    name: Examples / ${{ matrix.os }} / ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    needs: build-and-test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release, Debug]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up MSVC devcmd (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ucra-build-${{ matrix.os }}-${{ matrix.build_type }}
          path: .

      - name: Configure Main Project (for library install)
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DUCRA_BUILD_EXAMPLES=OFF

      - name: Build and Install UCRA Library
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel
          cmake --install build --config ${{ matrix.build_type }} --prefix ${{ github.workspace }}/ucra-install

      - name: Build Simple Usage Examples
        run: |
          cd examples/simple-usage
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_PREFIX_PATH=${{ github.workspace }}/ucra-install
          cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Test Simple Usage Examples
        run: |
          cd examples/simple-usage/build
          # Run examples that don't require additional data files (allow failures for missing config files)
          if [ "$RUNNER_OS" != "Windows" ]; then
            ./basic_engine || echo "Note: basic_engine failed (expected due to missing config)"
            ./simple_render || echo "Note: simple_render failed (expected due to missing config)"
          else
            ./basic_engine.exe || echo "Note: basic_engine failed (expected due to missing config)"
            ./simple_render.exe || echo "Note: simple_render failed (expected due to missing config)"
          fi
        shell: bash

      - name: Build Basic Rendering Examples
        run: |
          cd examples/basic-rendering
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_PREFIX_PATH=${{ github.workspace }}/ucra-install
          cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Test Basic Rendering Examples
        run: |
          cd examples/basic-rendering/build
          # Run examples that don't require additional data files (allow failures for missing config files)
          if [ "$RUNNER_OS" != "Windows" ]; then
            ./basic_rendering || echo "Note: basic_rendering failed (expected due to missing config)"
            ./multi_note_render || echo "Note: multi_note_render failed (expected due to missing config)"
            ./streaming_example || echo "Note: streaming_example failed (expected due to missing config)"
          else
            ./basic_rendering.exe || echo "Note: basic_rendering failed (expected due to missing config)"
            ./multi_note_render.exe || echo "Note: multi_note_render failed (expected due to missing config)"
            ./streaming_example.exe || echo "Note: streaming_example failed (expected due to missing config)"
          fi
        shell: bash

      - name: Build Advanced Examples
        run: |
          cd examples/advanced/ucra-world-engine
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DUCRA_ENABLE_WORLD=OFF
          cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Test Advanced Examples
        run: |
          cd examples/advanced/ucra-world-engine/build
          # Run basic tests that don't require WORLD engine
          ctest --output-on-failure --build-config ${{ matrix.build_type }} || true

  build-and-test-cpp-bindings:
    name: C++ Bindings / Ubuntu / ${{ matrix.build_type }}
    runs-on: ubuntu-latest
    needs: build-and-test
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release, Debug]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Configure UCRA with C++ bindings
        env:
          CI: true
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DUCRA_BUILD_EXAMPLES=OFF -DUCRA_BUILD_TOOLS=OFF -DUCRA_BUILD_CPP_BINDINGS=ON

      - name: Build UCRA and C++ bindings
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Test C++ bindings
        run: |
          # Copy sample voicebank to test working directory
          mkdir -p build/voicebank
          cp -r examples/sample-voicebank/* build/voicebank/
          # Also copy to the test execution directory
          mkdir -p bindings/cpp/tests/voicebank
          cp -r examples/sample-voicebank/* bindings/cpp/tests/voicebank/
          # Run only wrapper unit tests; sample app requires WORLD, which CI doesn't build
          ctest --test-dir build --output-on-failure --build-config ${{ matrix.build_type }} -R "cpp_wrapper_test"

      - name: Run C++ sample application with voicebank
        run: |
          cd build
          # Voicebank already copied in test step
          ./bindings/cpp/tests/cpp_sample_app || echo "Note: C++ sample failed"

  build-and-test-dotnet-bindings:
    name: .NET Bindings / Ubuntu / ${{ matrix.build_type }}
    runs-on: ubuntu-latest
    needs: build-and-test
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release, Debug]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          # Install .NET 9 SDK so we can build/run the net9.0 sample app
          # Newer SDKs can also build older target frameworks (e.g., net6.0 tests)
          dotnet-version: '9.0.x'

      - name: Configure UCRA with .NET bindings
        env:
          CI: true
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DUCRA_BUILD_EXAMPLES=OFF -DUCRA_BUILD_TOOLS=OFF -DUCRA_BUILD_DOTNET_BINDINGS=ON -DBUILD_SHARED_LIBS=ON

      - name: Build UCRA and .NET bindings
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Check built libraries
        run: |
          echo "Checking built libraries:"
          find build -name "*ucra_impl*" -type f
          ldd build/libucra_impl.so || echo "ldd not available or library not found"

      - name: Test .NET bindings
        env:
          LD_LIBRARY_PATH: ${{ github.workspace }}/build:$LD_LIBRARY_PATH
        run: |
          # Copy sample voicebank to .NET test directory
          mkdir -p bindings/dotnet/voicebank
          cp -r examples/sample-voicebank/* bindings/dotnet/voicebank/
          # Copy shared library to .NET output directory to help with loading
          mkdir -p bindings/dotnet/bin/Release/netstandard2.0/
          mkdir -p bindings/dotnet/tests/bin/Release/net6.0/
          cp build/libucra_impl.so bindings/dotnet/bin/Release/netstandard2.0/ || echo "Failed to copy library"
          cp build/libucra_impl.so bindings/dotnet/tests/bin/Release/net6.0/ || echo "Failed to copy library to test dir"
          ctest --test-dir build --output-on-failure --build-config ${{ matrix.build_type }} -R "dotnet"

      - name: Run .NET sample application with voicebank
        env:
          LD_LIBRARY_PATH: ${{ github.workspace }}/build:$LD_LIBRARY_PATH
        run: |
          # Voicebank already copied in previous step
          cd bindings/dotnet
          dotnet run --project samples/UCRA.NET.Sample.csproj -c Release || echo "Note: .NET sample failed"

  build-and-test-python-bindings:
    name: Python Bindings / Ubuntu / ${{ matrix.build_type }} / Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: build-and-test
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release, Debug]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pybind11 numpy pytest

      - name: Configure UCRA
        env:
          CI: true
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DUCRA_BUILD_EXAMPLES=OFF -DUCRA_BUILD_TOOLS=OFF -DUCRA_BUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED_LIBS=ON

      - name: Build UCRA library
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Build Python bindings (via setuptools)
        run: |
          cd bindings/python
          python -m pip install --upgrade pip
          pip install -e .

      - name: Verify Python module import
        run: |
          python -c "import ucra; print('ucra imported OK')"

      - name: Test Python bindings
        run: |
          cd bindings/python
          python -m pytest tests/ -v

      - name: Run Python sample application with voicebank
        run: |
          # Copy sample voicebank to Python bindings directory
          mkdir -p bindings/python/voicebank
          cp -r examples/sample-voicebank/* bindings/python/voicebank/
          cd bindings/python
          LD_LIBRARY_PATH=../../build:$LD_LIBRARY_PATH python examples/sample.py || echo "Note: Python sample failed"
