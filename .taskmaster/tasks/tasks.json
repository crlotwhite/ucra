{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Define Core UCRA C API & Data Structures",
        "description": "Implement the foundational `ucra.h` C header with all specified data structures (`UCRA_KeyValue`, `UCRA_F0Curve`, `UCRA_EnvCurve`, `UCRA_NoteSegment`, `UCRA_RenderConfig`, `UCRA_RenderResult`) and core function signatures (`ucra_engine_create`, `ucra_engine_destroy`, `ucra_engine_getinfo`, `ucra_render`).",
        "details": "Focus on C99 compatibility and clear ABI. Define error codes as per section 6.3. This task forms the backbone of the entire system, enabling subsequent development of engines and SDKs.",
        "testStrategy": "Compile `ucra.h` with a dummy C file to ensure syntax correctness. Write basic unit tests for struct sizes and ensure function signatures are correctly exposed (even if they are stubs initially).",
        "priority": "high",
        "dependencies": [],
        "status": "Not Started",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Implement UCRA Manifest Schema & Parser",
        "description": "Define the `resampler.json` manifest schema (as per section 6.4) and implement a robust parser within the SDK. This parser will be used by the SDK to load engine capabilities and by tools like the OpenUtau manifest generator.",
        "details": "Select a suitable JSON parsing library (e.g., Jansson, RapidJSON). Implement schema validation to ensure manifests conform to the specified structure. The parser must correctly extract `entry` points, `audio` capabilities, and `flags` definitions, including types, descriptions, and ranges.",
        "testStrategy": "Create various valid and invalid `resampler.json` files. Test the parser's ability to correctly load data from valid files and gracefully handle errors or malformed input from invalid files. Verify all fields are parsed correctly.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "Not Started",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Develop Legacy CLI Bridge (`resampler.exe`)",
        "description": "Create the `resampler.exe` (or `resampler` for non-Windows) binary that acts as a drop-in replacement for existing UTAU resamplers. It must parse legacy UTAU CLI arguments, convert them into `UCRA_NoteSegment` and `UCRA_RenderConfig` structures, and call the UCRA API.",
        "details": "Implement robust argument parsing for all specified legacy UTAU flags (e.g., `--input`, `--output`, `--note`, `--tempo`, `--flags`, `--f0-curve`, `--vb-root`, `--oto`, `--rate`). Handle the conversion of these legacy parameters into the UCRA data structures. Manage temporary files and ensure correct engine selection based on the manifest.",
        "testStrategy": "Run the bridge with a comprehensive set of UTAU-like CLI commands. Verify that the internal UCRA structures are correctly populated. Once an engine is integrated, compare output WAVs with those generated by original legacy resamplers for functional equivalence.",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "Not Started",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement UCRA Streaming API",
        "description": "Implement the `ucra_stream_open`, `ucra_stream_read`, and `ucra_stream_close` functions for real-time audio streaming, crucial for low-latency preview in editors like OpenUtau.",
        "details": "Design the internal state management for streaming, including handling `block_size` from `UCRA_RenderConfig`. The `UCRA_PullPCM` callback model needs to be correctly integrated. Consider buffering strategies and thread safety for concurrent access.",
        "testStrategy": "Create a test client that opens a stream, pulls PCM data in blocks, and verifies continuity and latency. Simulate different block sizes and note segment configurations to ensure stable streaming performance. Measure actual latency against the 15ms target.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "Not Started",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Integrate Reference Engine (WORLD/LLSM2 Wrapper)",
        "description": "Develop a concrete implementation of a UCRA-compatible resampler engine by wrapping an existing open-source engine like WORLD or LLSM2. This will serve as a reference and validate the UCRA API.",
        "details": "Implement the `ucra_engine_create`, `ucra_render` (offline), and potentially streaming functions for the chosen engine (e.g., WORLD). Handle internal engine-specific logic for processing `UCRA_NoteSegment` data, applying F0/envelope curves, processing flags, and generating PCM output. Ensure proper resource management.",
        "testStrategy": "Use the CLI bridge (Task 3) to render various note segments and compare output WAVs against the original WORLD/LLSM2 output for fidelity. Verify the `ucra_engine_getinfo` output matches the engine's capabilities. Conduct basic performance tests.",
        "priority": "high",
        "dependencies": [
          1,
          2,
          3,
          4
        ],
        "status": "Not Started",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Develop Multi-language SDK Wrappers",
        "description": "Create higher-level SDK wrappers for C++, .NET (P/Invoke), Python (pybind11), and Rust (bindgen + safe wrapper) to simplify UCRA API usage for developers in those languages.",
        "details": "Focus on idiomatic usage for each language (e.g., RAII for C++, NumPy integration for Python, safe abstractions for Rust). Ensure proper memory management, error handling, and type conversions between the native C API and the target language.",
        "testStrategy": "Write sample applications in each language that utilize the wrappers to call the UCRA API and render audio via the integrated reference engine. Verify that the output is identical to direct C API calls.",
        "priority": "medium",
        "dependencies": [
          1,
          5
        ],
        "status": "Not Started",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Create OpenUtau Manifest Generator & Sample Integration",
        "description": "Develop a tool that can automatically generate OpenUtau-compatible resampler manifests from a UCRA `resampler.json` file. Provide sample code or an adapter for OpenUtau integration.",
        "details": "Implement the logic to map UCRA flags, audio capabilities, and entry points to OpenUtau's manifest format. Demonstrate how OpenUtau can utilize the UCRA streaming API for preview and caching mechanisms (e.g., `hash(voicebank+segment+flags)`).",
        "testStrategy": "Generate manifests for the reference engine and verify they are correctly parsed and displayed within OpenUtau. Test preview and caching functionality by rendering segments and observing behavior within OpenUtau's UI.",
        "priority": "medium",
        "dependencies": [
          2,
          5,
          6
        ],
        "status": "Not Started",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Core Testing & Validation Toolchain",
        "description": "Develop essential tools for quality and performance validation, including a 'Golden Runner' for regression testing, and basic objective metric calculation (F0 RMSE, MCD).",
        "details": "The Golden Runner should compare rendered output WAVs against pre-recorded 'golden' WAVs and report differences (e.g., using audio diffing or checksums). Implement calculation of objective metrics like F0 RMSE and MCD(13) as specified in section 11. Provide a framework for running these tests automatically.",
        "testStrategy": "Create a suite of golden voicebanks and UST cases. Run the Golden Runner and metric tools against the reference engine to establish baselines and detect regressions when changes are introduced. Verify metric calculations against known values.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "Not Started",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Develop Flag Standardization & Mapping Tool",
        "description": "Create a dedicated tool or module to manage and apply flag standardization and mapping rules between legacy engine flags and UCRA's standardized flags.",
        "details": "This tool should allow defining and applying mapping rules (e.g., `moresampler`'s `g` flag to UCRA's `g` flag with range conversion, default values, and conflict resolution). It can be integrated into the CLI bridge or used standalone for manifest generation.",
        "testStrategy": "Define mapping rules for a few legacy engines (e.g., moresampler, tn_fnds). Test the tool's ability to correctly transform flag sets, handle out-of-range values, and report warnings for unsupported flags as per section 8.",
        "priority": "low",
        "dependencies": [
          2,
          3
        ],
        "status": "Not Started",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Finalize Documentation & Distribution Artifacts",
        "description": "Compile comprehensive documentation for the UCRA API, SDK usage, manifest schema, and integration guides for various editors. Prepare the final distribution artifacts as per the proposed repository structure.",
        "details": "Write detailed documentation for `docs/spec_manifest.md`, `docs/api_ucra.md`, and `docs/guides/` covering UTAU, OpenUtau, TuneLab, and ENUNU integration. Organize the `sdk/`, `engines/`, `adapters/`, and `tools/` directories for release, ensuring all necessary headers, libraries, and executables are included.",
        "testStrategy": "Conduct a thorough review of all documentation for clarity, accuracy, and completeness. Verify that all distribution files are correctly packaged, accessible, and follow the proposed monorepo structure. Ensure all licenses are correctly applied and noted.",
        "priority": "low",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "status": "Not Started",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-10T12:56:02.632Z",
      "updated": "2025-08-10T12:56:02.632Z",
      "description": "Tasks for master context"
    }
  }
}